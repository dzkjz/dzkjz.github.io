<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://dzkjz.github.io/</id>
    <title>JojoLegend</title>
    <updated>2020-08-04T17:05:51.900Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://dzkjz.github.io/"/>
    <link rel="self" href="https://dzkjz.github.io/atom.xml"/>
    <subtitle>Something for age</subtitle>
    <logo>https://dzkjz.github.io/images/avatar.png</logo>
    <icon>https://dzkjz.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, JojoLegend</rights>
    <entry>
        <title type="html"><![CDATA[博文写手访谈记 及找写手的经验记]]></title>
        <id>https://dzkjz.github.io/post/bo-wen-xie-shou-fang-tan-ji-ji-zhao-xie-shou-de-jing-yan-ji/</id>
        <link href="https://dzkjz.github.io/post/bo-wen-xie-shou-fang-tan-ji-ji-zhao-xie-shou-de-jing-yan-ji/">
        </link>
        <updated>2020-08-04T15:56:29.000Z</updated>
        <content type="html"><![CDATA[<p>Source：</p>
<blockquote>
<p>https://www.seoactionblog.com/good-writers/<br>
https://www.seoactionblog.com/hire-writers-outsource-content/<br>
https://www.seoactionblog.com/outsourcing/</p>
</blockquote>
<p>几个写手提到的网站：</p>
<ol>
<li>https://problogger.com/</li>
<li>https://www.reddit.com/r/HireaWriter/</li>
<li>https://www.reddit.com/r/freelanceWriters/</li>
<li>https://www.verblio.com/</li>
</ol>
<p>另注：</p>
<blockquote>
<p>我没用请外国写手写过文章，不知道怎么定价，如果是按字数收费，一般1000字左右的文章多少钱合适呢？<br>
这个因人而异，1000字的文章，我的付费范围一般在40-120刀之间。</p>
</blockquote>
<h3 id="如何通过互联网招聘优质国外写手及外包内容开篇">如何通过互联网招聘优质国外写手及外包内容（开篇）</h3>
<p>摘：</p>
<blockquote>
<p>关于写手的故事，说个最近发生的。</p>
<p>一直以来，我在亚洲没招到过满意的写手，可能是我比较挑剔，对内容质量要求太高。。每每看到印度和巴基斯坦等国家写手码的那些字，看得有点让我呕吐的感觉。</p>
<p>真的，他们是“码”英文字符，而不是写英文博客。。质量简直堪比我们中学生的英语作文（呃，这个比喻可能不太合适）</p>
<p>这不是最要命的，更让人崩溃的是他们的工作态度。</p>
<p>怎么讲？</p>
<p>比如：说好三天交稿，结果截止日期到了，他给你一大推理由推迟。。我家断电了，没网了，电脑坏了，房子被淹了，地震了，连海啸都搬出来了，OMG</p>
<p>所以，后来我对东南亚的写手有天生的偏见，也不怪我，因为那边的优质写手真的太少了。</p>
<p>不过，去年好不容易招了个菲律宾的，貌似还不错，价格和态度看起来都还OK，结果某天突然失联，任凭我followup邮件都不回，还有两篇文章在pipeline呢。</p>
<p>我也没理他，结果你猜怎么了？</p>
<p>三个月后，他又出现了。。让我震惊的是：他的两篇文章保质保量完成！</p>
<p>我也没食言，直接打款给他了，这是我给他的邮件：</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/email-writer.png" alt="" loading="lazy"></figure>
<p>这是他的回复：</p>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/writer-response.png" alt="" loading="lazy"></figure>
<p>看得出来，他挺幽默的。</p>
<p>其实，我也不知道他是真结婚还是假的，或许遭遇了什么life event，比如抑郁了啥事都不想干。。Anyway，我更看中的是结果，所以pay了他$200（没加bonus）。</p>
<p>说到这里，如果Victor真的再次无理由失联，我会马上fire掉他，理由很简单：Good writers don’t make mistakes twice!<br>
另注：<br>
Hello 博主<br>
现在正在寻找写手，要价高的都要到0.3美金/词了， 是我找错人了吗，还是现在价格涨了。</p>
<p>回复</p>
<p>John<br>
2019-12-13 at 20:41<br>
找错人了，一般4-10美分一个字。</p>
<p>回复</p>
</blockquote>
<h3 id="如何通过互联网招聘优质国外写手及外包内容外包篇">如何通过互联网招聘优质国外写手及外包内容（外包篇）</h3>
<blockquote>
<p>还有，做SEO的，我们都知道，内容（content）决定成败，不管是你写的文章，还是外包给写手，都应达到Google质量评估指南里的E-A-T标准，否则就有风险。<br>
如果你（或你公司）需要一个人，完成一件简单、可考核、而且你做过的非重要事情，最好选择外包。<br>
如果你（或你公司）需要一个人，完成一件复杂、很难考核、需头脑风暴、内部讨论、汇报决策等重要的事情，最好选择内招。<br>
值得外包的一般都是那些非重要的事情，这些事你可以做，但很伤脑细胞，或受限于精力没法完成。而且这些事，基本可以通过邮件沟通完成，无需电话或线下讨论。<br>
而内招，正好相反，需要你跟他/她沟通决策的时候，直接办公椅一挪。。就可以跟此人交流，快速高效。</p>
</blockquote>
<p>我们分解一下SEO，然后谈谈哪些适合外包，简单用一个公式：</p>
<p><strong>SEO = 内容 x 外链 x 用户体验</strong></p>
<p>先说我的个人判断，再谈理由。</p>
<h5 id="内容">内容：</h5>
<ul>
<li>Content Planning（内容策划） — 不可外包</li>
<li>Article Writing（文章写作） — 可外包</li>
<li>On-page SEO（文章页面优化） — 最好不外包</li>
<li>Article Uploading（文章上传发布） — 可外包</li>
</ul>
<h5 id="外链">外链：</h5>
<ul>
<li>Prospecting（寻找可外联的资源） — 最好不外包</li>
<li>Email collecting（查找邮件地址）— 可外包</li>
<li>Outreaching（发送邮件） — 可外包</li>
<li>Handling replies（回复邮件）— 最好不外包</li>
</ul>
<h5 id="用户体验">用户体验：</h5>
<ul>
<li>Logo Design （网站或品牌Logo设计）— 可外包</li>
<li>UI/UX Audit（网站用户体验审查）— 可外包</li>
<li>Web Design（站内导航排版布局）— 可外包</li>
<li>Infographic Design（信息图制作）— 可外包</li>
</ul>
<h5 id="content-planning内容策划">Content Planning（内容策划）:</h5>
<p>我标注的是不可外包，因为它太重要了，可能需要多次头脑风暴、竞争分析、收益预估等等。</p>
<p>通常是一个很长的流程，而且很难标准化，更别提KPI了（虽然也行，但我认为超难而且耗时）。。你要外包给美国人，他们肯定也很confusing，再加上他们一般不是你行业的专家，对你所在的细分市场理解肯定不如你。</p>
<p>所以，这个你自己做最合适。</p>
<p>P.S. 做内容策划，我一般只做3-6个月的，时间跨度太长的话，数据可能不准，而且实施起来有motivation挑战。</p>
<h5 id="email-collecting查找邮件地址">Email collecting（查找邮件地址）：</h5>
<p>我标注的是可外包，而且如果你是用email sending工具群发outreach邮件时，强烈建议你外包邮件查找这个环节。</p>
<p>想想看，给你一批外联机会站点，你一小时可能就能找10个左右（我试过的），一天8小时顶多找100个站点邮箱地址，而且估计把你累趴下。</p>
<p>我以前有位同事是管理这方面的高手，他从Upwork招了一批来自东南亚的人专门查找邮件，汇报的Excel表格绝对让人叹服，比如：某位data entry analyst这个月找了多少邮件、花了多长时间、付了多少钱，甚至精确计算出了这些人的能力值，谁高谁低一目了然。</p>
<p>P.S. 我现在是手工档，Outreach时从来不群发邮件。</p>
<h4 id="外包的原则及建议">外包的原则及建议</h4>
<ol>
<li>没做过的事情最好别外包。</li>
</ol>
<p>这是我给所有寻找外包的SEO人的第一条建议。</p>
<p>没错，没做过的事情我基本上不外包，除非我不会做，比如：Design一个Logo或Infographic（呃，其实我也干过），这个是非常烧脑的事，还是交给专业的设计师做比较好。</p>
<p>再比如，写英语文章，这个我更加确信你要自己先写，然后再考虑是否外包，原因：</p>
<ul>
<li>只有你写过了，才知道写作的挑战，需要多长时间完成，有哪些细节需要注意。</li>
<li>只有你写过优质的文章，招聘的写手才会服你，更愿意跟你合作，真的。</li>
<li>只有你写过了，才知道哪个写手好，哪个写手差，付多少钱更合适。</li>
<li>还有一点，你写过的文章可以就是模板，是最好的content briefing（给写手的内容简报），也是最好的质量标杆，无形之中给写手施压。。看，这是我写的，你写的最好别比我差就行，哈哈。</li>
</ul>
<p>写手也是人啊，你花时间把他们要做的事情变得更简单，他们也会更加appreciate你。。以后长期合作才有可能嘛。</p>
<p>P.S. 别不自信，英文写作一样熟能生巧，不过文章发表前，最好招个美国编辑Editor把文字磨光一遍。</p>
<ol start="2">
<li>外包的事情要流程化。</li>
</ol>
<p>什么是流程？简单的将，就是什么人在什么时候做什么事情。</p>
<p>一篇文章的外包，大概需要经历以下环节：</p>
<ul>
<li>选择主题写Content Briefing（执行人：你 | 耗时：15-30分钟）</li>
<li>研究主题、撰写初稿（执行人：写手 | 耗时：5-10小时）</li>
<li>审阅写手的初稿、并提交修改建议（执行人：你 | 耗时：1-2小时）</li>
<li>完成修改（执行人：写手 | 耗时：30分钟）</li>
<li>付款（执行人：你 | 耗时：10分钟）<br>
这个流程是我和我招聘的写手之间的，耗时也是根据我的项目预估的，不一定适合你，但本质相通。</li>
</ul>
<p>将一件事情流程化，有很多好处，其中最大的就是：取得写手的信任！</p>
<p>当你把这个流程展示给他们的时候，一方面让他们知道要干哪些活，另一方面他们会更有理由相信跟你合作是最轻松的，这个在下面的求职者心理部分也会提到。</p>
<ol start="3">
<li>外包的东西最好有考核的标准。</li>
</ol>
<p>这个很好理解，就像企业里常用的KPI（Key Performance Indicator），你需要知道哪些写手在over-delivering，哪些在under-delivering，还有哪些是freeriders瞎糊弄。</p>
<p>这些通过比较，就一目了然。当然，前提是同一份工作，多个求职者。</p>
<p>这也是为什么在招聘的筛选阶段，有时你可以选择多招几个人同时进行一个test project，多花一点钱，目的是为了找到那些over-delivering的申请者。</p>
<p>比如：给5个申请者发送这样一个任务，完成一篇关于某某主题的文章，3日内交稿，2000字（可上下浮动300字）。</p>
<p>3天后，比较5个申请者提交的初稿，孰好孰坏，一阅便知，参考的标准可以是：</p>
<ul>
<li>提交时间</li>
<li>提交方式</li>
<li>文章质量</li>
<li>文章字数</li>
<li>没有没问你问题<br>
注：有时我会故意在content briefing里说到提交方式为Google Doc，Pass掉那些发送Word文档的，因为他们不仔细看briefing，很难让人信服他们有attention to details的品质；</li>
</ul>
<p>还有，有没有问你问题也很重要，我会给问我问题的申请者加分，因为他们care这份外包工作，所以想确保写的东西符合我的预期。</p>
<h4 id="为什么了解求职者心理很重要">为什么了解求职者心理很重要</h4>
<p>看到没有，虽然你提供的报酬很重要（也必须有诱惑力），但是还有两个其他的东西对优质写手很有杀伤力。</p>
<p>一是：你是否愿意给写手适当的自由发挥空间；二是：你要他写的文章是否会很无聊（boring）。</p>
<p>第一，优质写手选择跟你合作前，还会check你的背景。这是我招聘的加拿大写手亲自告诉我的，如果他们发现你的动机不对，很有可能就不会申请了。注意：优质写手很聪明的，关于SEO，他们或许比你更懂。</p>
<p>第二，每个优质写手的风格不一。有的像Joshua说的喜欢你给点自由空间，但有的不是，比如：我招的一个美国大学生，程序媛一枚，就喜欢你给她布置作业一样，说deadline是什么时候就啥时候提交，是不是勾起你大学时的记忆呢？呵呵。</p>
<p>第三，优质写手不太可能只为你一家做事。我所了解的，欧美有经验的freelancing writers一般会take 2-3份兼职写作任务，不然很难维持生活，所以，如果你遇到这样的写手时，提供creative freedom对他们通常很有吸引力。</p>
<p>第四，优质写手喜欢跟有条理的雇主共事。因为，有条理的雇主会make their work easier，上面说到，你让他们知道合作的流程，什么时候谁负责哪部分事情，团队合作就应该这样，还有，任何时候有变故，比如：无法按时审阅稿子时，发封邮件跟他们说一下，别等到最后一刻。</p>
<p>第五，优质写手也渴望有学习的机会。他们申请你的工作是选择一种lifestyle（生活方式），但跟我们一样，也渴望不断学习、提高自己，这样生活和工作才有意义，对不对。。所以，在招聘时可以适当展示一下你自己或你的公司，但要保持谦卑，不可过度。</p>
<p>注：</p>
<blockquote>
<p>支付手续费一般不超过3%吧，和文章的bonus相比（我一般加付10%-20%），手续费是小头。<br>
遇到好的写手，在经济上不要拮据，要知道你花在招聘上的时间和精力也是成本啊。<br>
平台很多，我最喜欢Upwork和Problogger。</p>
</blockquote>
<h3 id="如何通过互联网招聘优质国外写手及外包内容招聘篇"><a href="https://www.seoactionblog.com/hiring/">如何通过互联网招聘优质国外写手及外包内容(招聘篇)</a></h3>
<ol>
<li>大众系<br>
特点：这类招聘平台你可以发布几乎任何招聘需求（文案写作、翻译、设计、coding、数据录入等），只要能依靠互联网远程完成，你无需线下去招聘员工。<br>
比如：Upwork, Fiverr, Craigslist, Freelancer, PeoplePerHour等。<br>
注：Craigslist在国外是一个很知名的找工作找房子买卖二手家具的平台，它也包含有招聘的版块，有点像我们的58同城，啥都有，据说在某些国家能招到不错的写手；Freelancer.com和PPH我只听说过但没试过。</li>
</ol>
<blockquote>
<p>简单来讲，在Upwork上招聘写手包含以下几个步骤：</p>
<p>Step 1: 发布招聘需求广告;<br>
Step 2: 面试应聘者；<br>
Step 3: 确定雇佣对象并开始项目合作。<br>
Fiverr也是一个不错的freelancing平台，但它更适合one-time projects（一次性的外包需求），而Upwork恰好相反，适合ongoing projects（持续性的内容外包）。</p>
<p>比如：你要设计网站Logo，可以通过Fiverr找一个rating较高的设计师，付给她20刀，在白纸上花个草图，拍张照片发给她，三天左右你就可以收到满意的JPEG/PNG原图。</p>
<p>对，以前我就是这么干的，专业的事交给专业的人，别为了个Logo去自学Photoshop，不划算，而且真的烧脑。</p>
<p>再举个例子，不都说Video效果比文字好么。。a video is worth a thousand words!</p>
<p>你制作视频的时候，可能需要用标准的美式英语作为背景配音，那么你也可以通过Fivver完成，我之前在美国工作的时候就在Fiverr上和一个freelancer合作过。</p>
<p>你给他一段script，定义好朗读风格，他照着script读并录下来，给你的mp3音频文件，播放出来的效果跟我们广播学院毕业的播音员有的一拼。。当然，别人念的是英文，我们的播音员是中文。</p>
<p>价格也不贵，按照script长短付费，当时好像是每100个英文单词收50刀，性价比绝对比你在国内找的英语专八高。</p>
<p>说到这里，容我再啰嗦几句，。我发现，国内很多做海外营销的伙伴们把很多问题归根于自己英语不好，比如：发音不标准，单词量不够等等，好像学好英语就像是升职加薪的唯一通道，于是不惜代价恶补英语，刚毕业的大学生喜欢自学，有点积蓄的会报班上课。</p>
<p>见到这样的现象，我只想说：精神可嘉，但不一定值得！</p>
<p>并非说英语不重要，但语言毕竟是语言，只是沟通的工具而已，老外选择跟你做生意不是因为你们公司业务员英语说得有多溜，而是认为你们的产品靠谱、人可信。</p>
<p>信任，这东西看不见摸不着，但真的是一切business的根基。</p>
<p>同样的，下面我会介绍怎么撰写招聘广告，别以为一则完美的广告就能吸引到优质写手，他们很聪明的，选择跟你合作通常不是因为你的offer给得有多丰厚，而是你（或你公司）的人品如何，值不值得信任并长期合作下去。</p>
<p>好了，回来，接着介绍freelancing平台。</p>
</blockquote>
<ol start="2">
<li>纯内容系<br>
特点：中介、流程简单、专一（只跟writing有关）<br>
比如：TextBroker, iWriter, WordAgents, Constant Content<br>
通过大众系进行网络招聘，用圈内的话说：it’s a hit or miss（命中或错过），言下之意，招到好写手有些运气的成分，而且招聘的过程非常耗时。<br>
比如：你要写得到一篇博客文章，通过Textbroker按照它的流程提交好需求后，可能一两天就能得到草稿；通过WordAgents这样的内容中介，付款后，一周左右也可以拿到草稿；Constant Content更快，如果你想要的主题已经在它的内容库里，付款后就可以直接拿走使用。</li>
</ol>
<p>内容质量，我的感觉是良莠不齐，个人使用过TextBroker和iWriter，说实话，很失望；但又同行反应还不错，可能跟个人的内容预期有关。</p>
<p>至于内容中介，可以看看AuthorityHacker写的<a href="https://www.authorityhacker.com/best-content-creation-services/">这篇文章</a>。</p>
<ol start="3">
<li><strong>其他系</strong><br>
特点：懂行 or 会写 or both的写手相对多、但招到他们不那么容易<br>
比如：<strong>ProBlogger、写手个人博客、写手聚集的Facebook社区、Reddit子版块的那些细分行业的专家等这些地方是我最喜欢的，我的好写手大部分也是通过Problogger招到的</strong>，虽然在大众系里也招到过一些（通过Upwork），但，不得不说，你想找到既会写作、也懂行的优质写手，来这里的概率相对会高。</li>
</ol>
<p>还是那句话：去会写的地方找懂行的，去懂行的地方找会写的。</p>
<p><strong>Problogger和写手聚集的网络社区，便是前者；Reddit子版块、垂直行业论坛等地方便属于后者</strong>，这里就不花时间一一介绍了。</p>
<h4 id="如何写出吸引写手眼球的招聘广告">如何写出吸引写手眼球的招聘广告</h4>
<p>上面提到了招聘广告，优质写手选择跟你合作，通常不会因为你的广告写得有多完美，或offer有多丰厚。</p>
<p>他们回复你之前一定会做尽职调查（due diligence），如果你是niche site个人站长，他们会去你的网站看，而且查看的第一个页面是about page，然后再瞧瞧你网站的其他内容；如果你是公司，他们一定会research你公司的资历，了解你们的产品和团队。</p>
<p>如果你有任何一点让他们不太满意的地方，比如：about页面就敷衍的几句官话，文章写的超烂，不用想，他们绝对会pass你的offer。</p>
<p>注意：我所说的他们指的是“优质写手”，而非mediocre or bad writers。</p>
<p>为什么我会如此确定？因为跟我合作一年之久的加拿大写手亲口跟我说的，记得我之前的某篇文章也提到过，这里就不赘述了。</p>
<p>总之，一句话：good writers know much more about you than you know about them（读起来是不是很拗口，哈哈）</p>
<p>不过，话说回来，怎么成功招聘到优质写手，一切都得从招聘广告开始。正如标准的marketing funnel一样（如下图）。<br>
<img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/hiring1-1024x654.png" alt="" loading="lazy"></p>
<p>（图片来源：LinkedIn）<br>
金字塔最上端的Loyalty/Advocacy，就好比是优质写手被招到并成功留下，对你忠诚，要实现这一步，你得从金字塔最下面的Awereness开始。</p>
<p>怎么Create Awareness？就是通过招聘平台发布招聘广告帖了，因此，怎么撰写吸引眼球的招聘广告就非常重要了。</p>
<p>当然，招聘广告的写法也很讲究，我不会给你模板（也不建议你直接拿网上能找到的template），但会跟你分享我认为一则好的job posting需要包含哪些因素。</p>
<p>在我看来，一则标准的广告贴应该包含以下几点：</p>
<ul>
<li>你要招聘的对象是谁？比如：copywriter, blogger, editor, etc.</li>
<li>你是谁？个人站长的话，建议多展示你的personality，如果你代表公司，就boast一下你们的核心竞争力，但别过度。。不管是个人还是公司，你要突出两点：第一、我们跟其他的网站（或竞争对手）不一样；第二、我有一颗改变世界颠覆行业的心。</li>
<li>你为什么要招聘？一句话，你的表述要突出scale up这个需求，因为growth太快人手不够。创建一个新的网站就像创业一样，你的business idea已经validate了，需要扩张。</li>
<li>你期望申请者具备哪些特质？比如：热爱你所在的细分市场、使用过或正在使用市场上的一些产品（方便写测评类文章）、沟通、英语是母语等等。</li>
<li>你的offerings是什么？除了基本的薪酬，你还会为写手提供什么福利。</li>
<li>求职者能获得什么？除了报酬，他们能获得什么（What’s in It for Them），比如：基于Performance的月度和年度奖金、新写手的话提供写作培训以提高他们的写作技能等。</li>
<li>申请流程是怎样的，及怎么联系你？这个最好在你撰写招聘广告之前就设置好，以便后续好管理，比如：你要写手回答什么问题；求职者也喜欢雇主完善的申请流程，优质写手会觉得你很organized。<br>
==== 以下部分是今天（2020年6月30日）写的 ====</li>
</ul>
<p>好的招聘广告是吸引优质写手的第一步，建议在撰写之前多想想，同时还建议，花点时间去研究一下招聘平台的规则。</p>
<p>比如：Upwork比较排斥你在招聘广告里放置邮件地址，它不喜欢你把他们的applicants拉着离开平台；Problogger有帖子置顶服务，只需多花点$$，就能让你的广告贴让更多人看到。</p>
<p>另外，为了感谢大家对本外包招聘系列篇的关注，请将你的招聘广告发送至我的邮件给你反馈。</p>
<h4 id="怎么筛选合格的申请者">怎么筛选合格的申请者</h4>
<p>我通常喜欢在招聘广告的结尾设置一个小trick，让他们邮件联系我，并注明邮件的主题（subject line）应该是怎样的，邮件内容要包含什么。</p>
<p>为什么放在邮件尾部？就是为了快速排除那些不看招聘广告就瞎投简历的不合格申请者。</p>
<ul>
<li>第一步，没有通过指定邮件给我联系的所有申请者，一律不考虑。</li>
</ul>
<p>因为他们没有仔细看我的招聘广告内容；如果他们连这个都不屑于看，你怎么能期望他们以后仔细看你的写作概要（writing guideline）呢，对吧。</p>
<ul>
<li>第二步，邮件主题（subject line）没有按照要求写的申请者，也直接pass掉。</li>
</ul>
<p>有时候，当你的广告发出后的两三天里，会有几百人来申请，我是没有时间一个一个点开看的，于是，Gmail的邮件搜索功能就发挥作用了，我会在搜索框里输入一个关键词，然后按时间将未读邮件排序，那些没有包含这个关键词的申请者就自动排除了。</p>
<ul>
<li>第三步，邮件内容文不对题、敷衍回答、有语法错误的，也不纳入考虑范畴。</li>
</ul>
<p>有时候，只需要一两秒，你就知道申请者是否是认真的，比如：你在招聘广告帖子里特别提到，不要附上任何简历和PDF文档，但有的人还是这么干。</p>
<p>我说明了native English speakers only，还有欧洲和亚洲的以英语为第N语言的人来申请，我也是醉了。</p>
<p>邮件以 Dear sir, Hello sir, Hi there等诸如此类的，我也基本是秒删，因为他们连我的名字都不屑一顾（我一般在招聘帖子的介绍部分提到我的first name），我也不care他们了。</p>
<p>总之，多看一些申请者的邮件后，稍稍比较一下，你就会明白好的和一般的区别。</p>
<ul>
<li>第四步，我一般喜欢把好的申请邮件标星（Starred），以便下一步回复邀请他们写作测试文章。</li>
</ul>
<p>同时，将他们的基本信息录入到一张spreadsheet里，以便后续进行对比，如图。<br>
<img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/hiring2.png" alt="" loading="lazy"></p>
<h4 id="如何通过test-article确定最后的合作对象">如何通过Test Article确定最后的合作对象</h4>
<ul>
<li>首先，你得准备好test article的topics。</li>
</ul>
<p>我是一名内容站长，一般的内容包含两种类型：commercial reviews + information articles，所以，测试文章我也喜欢让他们写两种。</p>
<p>还有一个原因，就是这两种文章类型可以考察写手不能的能力，怎么讲？</p>
<p>我的话，喜欢把reviews的规则（writing outlines）定的超详细，每个部分怎么写、写多少字、review的风格等等，这个writing outline消化完，估计都要花他们半个小时。</p>
<p>但information articles的规则就截然不同，我几乎只定个字数范围，然后让他们尽情发挥。</p>
<p>Reviews考察写手的“照抄”能力，Info articles考察他们的“创新”能力。</p>
<p>以我的经验，很少有写手能同时具备这两种能力，如果有，立即高价拿下。</p>
<ul>
<li>然后，邮件回复合格的申请者、邀请他们选择两个article topics进行测试，并说明是paid test articles。</li>
</ul>
<p>这一步，我会在邮件里根他们share一个Google sheet，里面有相当数量的article topics，以便他们挑选自己可以写作的。</p>
<p>通常，他们只需花几分钟的时间，选择好即可。</p>
<ul>
<li>下一步，待写手选择好测试文章主题后，你发送writing guidelines给他们，并注明初稿的提交截止日期。</li>
</ul>
<p>特别强调，一定要设置截止日期，而且标注时区（我一般以美东或美西时间定）！</p>
<p>没有在截止日期前提交初稿、或者延期提交但又没有好的理由的candidates，直接pass掉。</p>
<p>你会发现，有部分申请者在这一关掉链子了，挺好的，早发现早好，免得你招聘后失望。</p>
<ul>
<li>再下一步，审核申请者的测试文章，给他们的稿子评分。</li>
</ul>
<p>记得在spreadsheet里更新，不然申请者一多，你就忘了，还是这张图。</p>
<figure data-type="image" tabindex="3"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/hiring2.png" alt="" loading="lazy"></figure>
<p>高分的申请者，我喜欢标颜色，更醒目。</p>
<p>最后，确定长期合作的写手，商谈好价格，然后开始持续的内容产出。</p>
<p>招多少人，出多少价，看你的Budget有多少。</p>
<p>一个小tip：建议这个阶段多招聘几个，以免有个别写手因为各种原因，没法持续写作。</p>
<p>比如：去年的那次招聘，我留下了11名写手，但你猜，现在还剩下几个？</p>
<p>5！</p>
<p>有的是被我fire掉（看走眼了），有的是因为个人原因没法继续，毕竟这个属于freelance writing（兼职写作）。</p>
<p>好了，招到写手后，也不是万事大吉了，怎么成功留住他们，其实也蛮有挑战的，这也是锻炼你管理能力（并且是远程管理）的机会。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[怎么估算一个网站的收入？]]></title>
        <id>https://dzkjz.github.io/post/zen-me-gu-suan-yi-ge-wang-zhan-de-shou-ru/</id>
        <link href="https://dzkjz.github.io/post/zen-me-gu-suan-yi-ge-wang-zhan-de-shou-ru/">
        </link>
        <updated>2020-08-04T14:46:52.000Z</updated>
        <content type="html"><![CDATA[<p>这个可以直接去 <a href="https://flippa.com/">flippa</a><br>
或者 <a href="https://empireflippers.com/">empireflippers</a><br>
或者 <a href="https://feinternational.com/">FE International</a> 这种网站交易平台，<br>
看卖的网站价格，出售方会注明当前月收益还有流量数据：<br>
比如这个网站<br>
<img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200804225000.png" alt="" loading="lazy"><br>
然后<br>
流量数据可以去<a href="https://www.similarweb.com/">SimiliarWeb</a>搜：<br>
<img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200804225050.png" alt="" loading="lazy"><br>
当然有人会虚报，不过看的数据越多，也就越来越有数。<br>
这些网站的卖价倍数一般成交都在26-40之间。net profit*(26~40)=final price</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2019年清迈SEO大会笔记 摘抄]]></title>
        <id>https://dzkjz.github.io/post/2019-nian-qing-mai-seo-da-hui-bi-ji-day-1zhai-chao/</id>
        <link href="https://dzkjz.github.io/post/2019-nian-qing-mai-seo-da-hui-bi-ji-day-1zhai-chao/">
        </link>
        <updated>2020-08-04T11:59:28.000Z</updated>
        <content type="html"><![CDATA[<p>就是谈了个<a href="https://surferseo.com/">SurferSEO</a>，以及这个观点：</p>
<blockquote>
<p>Kyle Roof做了一个题为《Google’s Algorithm is an Algorithm》（谷歌的算法只是算法）的演讲，他首先抛出了”Google can’t read”（谷歌不会像人一样阅读）的结论，然后通过实验证实了。</p>
<p>实验的大概过程是：他将一个全是乱码（lump sum）的网页参与了”rhinoplasty chiang mai”（清迈整鼻手术）关键词的排名，而且排在第一页。<br>
这就是为什么近两年Correlational SEO（相关性SEO）很火的原因，一些工具比如：Surfer SEO, Coral, Page Optimizer Pro在市场上大卖。</p>
</blockquote>
<p>但是我比较在意的是这段话：</p>
<blockquote>
<p>怎么做到的呢？他首先分析了这个词排名前三的竞争页面，总结出一些特征，比如：关键词出现在哪里？重复次数多少？语义相关的词有哪些？几张图片？字数多少等等。</p>
</blockquote>
<p>这个就很牛了，就是讲了分析同行的数据的方法。</p>
<p>外链部分：</p>
<blockquote>
<p>你可以在多语言网站肆意建设外链，几乎任何一种外链建设策略都不会受到谷歌的惩罚。</p>
</blockquote>
<blockquote>
<p>Google.com, google.co.uk等英语搜索背后有成千上千万的谷歌员工去维护，你很难有投机取巧的机会，而北欧、越南等多语种地区，一般只有几个谷歌员工维护，所以可以“钻空子”的漏洞自然不少。</p>
</blockquote>
<p>技术部分：</p>
<blockquote>
<p>并号召我们SEO人别用Chrome浏览器（他自己用FireFox），因为Google会收集我们的使用数据（别免费把数据给搜索引擎）。</p>
<p>Barry推荐的technical SEO audit工具有：</p>
<p>Deep Crawl</p>
<p>Scream Frog</p>
<p>GSC Index (Google Search Console)</p>
<p>GTmetrix</p>
<p>301 Redirection Checker</p>
</blockquote>
<p><strong>不过这种分享会，要么资料观点网上有，要么就是不能分享的也不会分享了。</strong></p>
<blockquote>
<p>开头，他讲到了今年年初的两个小收获：</p>
<p>一是：更改一篇博客文章的update date后排名上涨，原来Google freshness真的有用；</p>
<p>并得出一些实用的结论：</p>
<p>别太过分关注搜索量（keyword volumn），还得看看SERP的点击率和前几名的流量（通过Ahrefs的click data）。比如：有些词搜索量巨大，但几乎不产生点击行为，那你就算拍上去了也是白搭，不会有多少流量。<br>
Build hubs, not pages。也就是silo的意思，把内容和主题相近的那些文章归类在一个hub里。<br>
内链的效果不比外链效果差，而且内链锚文本随意，关键词锚文本也可以。<br>
给谷歌想要的内容，而不是你认为最高质量的内容，什么是谷歌想要的内容呢，用Surfer SEO去发现SERP前几名的一些共性，然后整理出一份谷歌喜欢的内容框架，让写手去创作。<br>
精选摘要（featured snippets），去学习Hubspot吧，他们网站开发了专门给谷歌看的HTML代码，很干净！<br>
使用Google Search Console的URL Inspection去“实时”测试（24小时内，同一个页面，可以提交多次哦，直至谷歌让你明天再来尝试）。<br>
SERP里有一半的Title都是被谷歌修改过的，越短的title（50字符左右）表现越好。<br>
发送外链获取emails时，casual tone、精简、多次提及对方的名字等都有助于提升转化率。<br>
周一和周五发送邮件，回复率和转化率略比其他时间高。<br>
DR 30-50的网站更容易获得外链。<br>
一个页面的affiliate links多少与该页面的排名表现没有相关性（意思是：commercial pages不用在意有太多的affiliate links）。</p>
</blockquote>
<p>原文链接：https://mp.weixin.qq.com/s?__biz=MzIwOTg3MDQwOQ==&amp;mid=2247485566&amp;idx=1&amp;sn=e73c762425b0f2b5e1222c29bb60a3bb&amp;chksm=976c0358a01b8a4e044901f3860411e08452ee0cd50f40a11dc1e6236bd3068fde68b876a581&amp;token=1083511680&amp;lang=zh_CN#rd</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[My 15 All-Time BEST SEO Tips (That Get Results)]]></title>
        <id>https://dzkjz.github.io/post/my-15-all-time-best-seo-tips-that-get-results/</id>
        <link href="https://dzkjz.github.io/post/my-15-all-time-best-seo-tips-that-get-results/">
        </link>
        <updated>2020-08-03T18:01:08.000Z</updated>
        <content type="html"><![CDATA[<p>视频发布时间是2018年，源地址 https://www.youtube.com/watch?v=P_hPlUpLD54 作者官网 https://backlinko.com/</p>
<h2 id="use-short-urls">Use Short URL's</h2>
<p>说的是博主自己统计后，发现短链接rank better</p>
<h2 id="use-amazon-for-keyword-ideas">Use Amazon for keyword ideas</h2>
<p>find pop book on amazon in your niche<br>
checkout toc of that book, 这些标题小标题就是关键词呗<br>
然后去你常用的keyword 软件或者网站 搜这些关键词的volume大小，然后就是老路子，收集关键词。</p>
<h2 id="optimize-your-title-tag-for-ctr">Optimize your title tag for CTR</h2>
<p>CTR 利于 seo 就是整点能增加CTR的标题标签啥的，道理我都懂，做起来哪有那么多时间和心思。顾不过来啊。</p>
<h2 id="publish-content-at-least-1890-words">Publish content at-least 1890 words</h2>
<h2 id="use-title-tag-modifiers">Use title tag modifiers</h2>
<p>标题标签里加[2020] &quot;Best&quot; &quot;Review&quot; 'Free Shipping' &quot;Checklist&quot;这些词。<br>
最后标题就这模式：<br>
<img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200804021234.png" alt="" loading="lazy"><br>
然后你的关键词就可以match这么多：<br>
<img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200804021329.png" alt="" loading="lazy"></p>
<h2 id="use-keyword-rich-urls">Use Keyword-Rich URL's</h2>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200804021414.png" alt="" loading="lazy"></figure>
<h2 id="use-numbers-in-your-title-tag">Use numbers in your title tag</h2>
<p><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200804021559.png" alt="" loading="lazy"><br>
根据研究结果，标题里带数字CTR更高：这尼玛很容易变化的，有时候带表情也很高，有时候素一点更高。<br>
<img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200804021625.png" alt="" loading="lazy"></p>
<h2 id="use-two-step-email-outreach">Use two-step EMAIL outreach</h2>
<h2 id="broken-link-building">Broken Link-Building</h2>
<p>check my links 这招<br>
邮件模板：<br>
<img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200804022218.png" alt="" loading="lazy"><br>
等回复，然后<br>
<img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200804022239.png" alt="" loading="lazy"><br>
等回复，然后<br>
<img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200804022306.png" alt="" loading="lazy"></p>
<h2 id="choose-keyword-with-strong-commercial-intend">Choose keyword with strong commercial intend</h2>
<h2 id="delete-under-performing-pages">Delete Under performing Pages</h2>
<p>删掉多余的没啥用的页面，转换不高，没人气的就删了。</p>
<h2 id="optimize-your-videos-around-video-keywords">Optimize your videos around &quot;Video Keywords&quot;</h2>
<h2 id="use-reddit-for-keyword-research">Use Reddit for Keyword Research</h2>
<h2 id="link-out-to-authority-website">Link out to Authority website</h2>
<h2 id="hack-wikipedia-for-keyword-research">Hack Wikipedia for keyword research</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ SEO Tutorial for Beginners - Step by Step Guide 2020! (+YOAST SEO)]]></title>
        <id>https://dzkjz.github.io/post/seo-tutorial-for-beginners-step-by-step-guide-2020-yoast-seo/</id>
        <link href="https://dzkjz.github.io/post/seo-tutorial-for-beginners-step-by-step-guide-2020-yoast-seo/">
        </link>
        <updated>2020-08-03T17:50:33.000Z</updated>
        <content type="html"><![CDATA[<p>此类课程就是废话多，概念一堆，实操0。看了就是避免以后再去绕这些文字游戏。</p>
<p>教程地址：https://www.youtube.com/watch?v=f_n0_cxWqSs</p>
<h3 id="how-does-google-rank-websites">How Does Google Rank Websites?</h3>
<ol>
<li>扫描你的站点入库，用户搜索的是否与你站点内的内容有<strong>关联</strong>。这个一般就是搞点关键词，文章里尽量做点关键词，但不要超过2个或3个。</li>
</ol>
<blockquote>
<p>用户搜的关键词你的文章里有，那就有机会了。做关键词就是标题,URL，文章，meta，图片alt之类的里面搞。尽量搞一些还可以做的动的词，有的你排名怎么都做不到前10的牛词，做了也是白给。</p>
</blockquote>
<ol start="2">
<li>
<p>外链数量。就是其他网站提到你的网站，很重要，类似于被人提点，越多重要人物【网站】提到你【的站】，说明你的站越牛。<strong>被动技能，除非买外链</strong>。</p>
</li>
<li>
<p>点击率，这个就是搜索结果页面里，点你的概率，这尼玛<strong>玄学</strong>，用户一般点击是结果第1个 40% 第2名 20% 第3名 10% 然后第一页一般占了90%，那等于说，越靠前的就越来越高的点击率了。就是个<strong>被动技能</strong>。</p>
</li>
<li>
<p>停留时长，文章就是有点价值的，这个一般就是比较主观了，<strong>反正别水文章就行，要水也可以，可以多加点什么，想学这个，点这里，点那里，都是站内链接，用户看了不舍得关，一时半会儿又看不完，或者给你收藏了</strong>。</p>
</li>
<li>
<p>网站打开速度，越快越好。网站卡了用户体验性不好，搜索引擎也认为你的站不太OK。一般就是资源少点，css，js文件精简优化，图片不要太大。</p>
</li>
<li>
<p>对移动设备友好，基本上就是搞点AMP啊自适应之类的。</p>
</li>
<li>
<p>网站有价值，用户喜欢，这东西很主观的，评判标准就是shit。</p>
</li>
</ol>
<h3 id="types-of-search-queries-搜索动机类型">Types of Search Queries 搜索动机类型</h3>
<ol>
<li>查资料 how to/review/definitions/news...</li>
<li>找位置 netflix/ebay... 就是用户记不住完整url，搜一下名字，点一下就去官网了。 <strong>这种词一般用户就是直接谷歌然后到官网去的，没啥搞头</strong>。特别是那种大网站的词。</li>
<li>买东西 bmw x6/ticket/dell/iphone air pods...</li>
</ol>
<h3 id="finding-profitable-keywords-怎么找可以赚钱的关键词">Finding Profitable Keywords 怎么找可以赚钱的关键词</h3>
<h4 id="local">Local</h4>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200802224524.png" alt="" loading="lazy"></figure>
<ol>
<li>
<p>找你可能需要的关键词，比如你是做地毯清洁业务的，那就是哪里哪里，啥地毯清洁，然后去搜同行看他们的关键词，这样就有点思路了，用Notepad记录一下这些词；</p>
</li>
<li>
<p>Ubersuggest 搜一搜<br>
<img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200802225217.png" alt="" loading="lazy">找找思路，关键词，然后记录到notepad上。<br>
<img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200802230115.png" alt="" loading="lazy">不要搞太多，太多了思路不清晰。</p>
</li>
<li>
<p>​    关键词，页面思路图</p>
<p><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200802230250.png" alt="" loading="lazy">就是Title，URL，H1，Meta，Head之类，以及文章里面搞关键词，如主关键词是3个字的关键词，那么文章里面还可以搞些的短一点的2个，3个长度的，差不多意思的词。这个是原理，一般用网上的那种页面分析工具，会给你指出来。</p>
<p>如：<img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200803002248.png" alt="" loading="lazy"></p>
<p>不过这种方式，会找出一些很无关的，不过看得多了就知道是哪些词了，有的还带关键词在搜索引擎的排名数据【Ubersuggest可以】，就可以明显看出来了。</p>
<p>MozBar的chrome插件可以看PA DA，看搜索结果前10的同行数据，用于分析做好这个关键词要的时间，</p>
<p>这种可能需要一周就出结果【前10】</p>
<p><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200803003023.png" alt="" loading="lazy">这种可能需要几个月【前10】</p>
<p><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200803003103.png" alt="" loading="lazy">这种新手就不要想多了，要得久，且竞争激烈：</p>
<p><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200803003152.png" alt="" loading="lazy">这种词【how to】比较<strong>容易做</strong>，<strong>文章也好写</strong>，也有关联性，并且，这类how to之类的文章写出来，<strong>有阅读价值</strong>，也<strong>容易获得自然外链</strong>。</p>
<p><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200803003518.png" alt="" loading="lazy">如果看到有，流量也不错1000左右，那可以挑出来做。</p>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200803003725.png" alt="" loading="lazy"></figure>
<p>当然有钱的可以搞一个Semrush：</p>
<p><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200803003934.png" alt="" loading="lazy"> 直接搜一下同行的网站就出结果，相当省事。</p>
<figure data-type="image" tabindex="3"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200803004311.png" alt="" loading="lazy"></figure>
<p>这么多结果，一般就是挑一些有流量，KD【keyword difficulty】关键词难度不那么高的可以收集起来，分析后，可以做这些关键词。</p>
<p>还可以看<strong>Backlinks</strong></p>
<p><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200803004709.png" alt="" loading="lazy"><strong>还挺有用的，这第一个就是一个本地列表站，免费注册的，那么就可以自己也注册一个，发布上去，那就有一个免费高质量的外链了</strong>。可以多看看人家的外链，可以免费搞的那就给加上！</p>
</li>
</ol>
<h4 id="blogpersonal">Blog/Personal</h4>
<p>如果打算做Blog，可以有这几个方向【主要是以收入profit为导向】：<br>
<img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200803022250.png" alt="" loading="lazy"><br>
每个方向，都有很多例子，谷歌搜一搜，给你一大堆。<br>
这里以做一个旅游博客为例。<br>
<img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200803022527.png" alt="" loading="lazy"><br>
每一个关键词都可以用ubersuggest看看浏览量大小，以及其他相关的关键词，CPC信息等。</p>
<p>当然有些词，Ubersuggest还是看不到数量，那么就只有用adwords的keyword planner了：<br>
<img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200803142602.png" alt="" loading="lazy"></p>
<p>以下是基本操作步骤：<br>
<img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200803143706.png" alt="" loading="lazy"><br>
选择一个<strong>主关键词</strong>：这里是Things to do in Bali<br>
选择一个<strong>副关键词</strong>：这里是Things to do in Bali Indonesia<br>
用主关键词在Ubersuggest上搜一下，选择地区us，web，<br>
根据流量volume排序，选择几个与主关键词有一定联系【就是写文章的时候可能写得进去的】的<strong>联系关键词</strong>，这里选择了：<br>
<img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200803143540.png" alt="" loading="lazy"><br>
然后<strong>文章就是H1 Title URL meta用主词；第一段，第一行有主词副词；文章其他部分要有选择的联系关键词；联系关键词可以有5个-8个</strong>。</p>
<h4 id="ecommerce">eCommerce</h4>
<blockquote>
<p>用到个画板 <a href="https://awwapp.com/">awwapp.com</a></p>
</blockquote>
<p>这里用的例子是 iPhone accessories 苹果配件</p>
<p>一般是你做啥商品就想啥<strong>初始词</strong>。</p>
<p>这里就是举了几个手机配件的名字。</p>
<figure data-type="image" tabindex="4"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200803200219.png" alt="" loading="lazy"></figure>
<p>实在想不出，就去看同行搞的啥。</p>
<p>初始词想好就可以去Ubersuggest搜集一下推荐的<strong>关联词</strong>了</p>
<figure data-type="image" tabindex="5"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200803202948.png" alt="" loading="lazy"></figure>
<blockquote>
<p>为什么不去adwords的keyword panner?因为要登陆，还要adwords，挺麻烦的，当然更准确的。</p>
</blockquote>
<p>如果大部分词都是1000以下的：</p>
<figure data-type="image" tabindex="6"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200803203406.png" alt="" loading="lazy"></figure>
<p>那多整几个有关联的词，好出文章的，组成一组就行了。</p>
<figure data-type="image" tabindex="7"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200803204120.png" alt="" loading="lazy"></figure>
<blockquote>
<p>另外，重视一下这种best，top，how之类的词</p>
<figure data-type="image" tabindex="8"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200803203813.png" alt="" loading="lazy"></figure>
<p>因为一般来说，自然外链不会主动直接链接到你的商品上去，但是你写的best，howto教程之类的文章，就很容易获得自然外链。然后你再在这种文章里点一些你的商品，就可能有转化了。但最主要是用于获得外链的。</p>
</blockquote>
<p>还有就是直接谷歌搜一下，出来的结果中，看看同行怎么做的，有哪些商品，哪些词。SEO规划如何，这样知己知彼，还可以查漏补缺，取其精华。</p>
<p><strong>最好是记录一下同行的竞争页面URL，然后拿到Semrush里再去分析一下。主要是看有哪些带来流量的keyword</strong>：</p>
<figure data-type="image" tabindex="9"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200803204710.png" alt="" loading="lazy"></figure>
<p>可以收集些好的关键词【带量大的】，以及关键词页面的具体信息，可以学习。</p>
<p>然后拿去KWFinder搜搜，看看Keyword SEO Difficulty关键词上SEO的难度：</p>
<p><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200803205209.png" alt="" loading="lazy">这里是37，还比较容易，那就可以把这个词做主关键词了【可以用到商品分类名及标题上面或者url，h1啊】。</p>
<p>然后下面的suggestions可以看看挑几个做副关键词。</p>
<p>然后可以再用Ubersuggestion搜搜你的主关键词，看看其他词，有的就可以做具体商品类了。</p>
<figure data-type="image" tabindex="10"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200803205826.png" alt="" loading="lazy"></figure>
<p>然后再用这些词去谷歌看看同行的站点，还可以去KWFinder看看难度。太难的新手可能就只能放弃了。</p>
<p>然后又去Ubersuggestion搜这两个关键词，挑个相关的做副词。</p>
<figure data-type="image" tabindex="11"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200803210422.png" alt="" loading="lazy"></figure>
<p>差不多了。整个找关键词的流程就这样：</p>
<p><strong>初始词-&gt;推荐词-&gt;同行-&gt;KW/Uber/Keyword Planner/Semrush 分类主词/副词/具体页面主词/副词。</strong></p>
<figure data-type="image" tabindex="12"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200803210905.png" alt="" loading="lazy"></figure>
<h3 id="on-page-seo怎么做">On-Page Seo怎么做？</h3>
<p>这老师是用的wp做讲解，安装了yoast插件。然后就是一顿微操，<a href="https://www.youtube.com/watch?v=f_n0_cxWqSs&amp;t=5628s">这个</a>可以看看。平时没怎么注意有的设置还挺有用的。</p>
<figure data-type="image" tabindex="13"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200803220511.png" alt="" loading="lazy"></figure>
<h4 id="local-2">Local:</h4>
<p>文章内设置SEO:</p>
<figure data-type="image" tabindex="14"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200803220726.png" alt="" loading="lazy"></figure>
<h5 id="标题中">标题中：</h5>
<p>主关键词尽量靠前，实在不好组织语句就往后逐步顺延，但能靠多前靠多前。“ | ”后面的语句要做到：简洁明了，与众不同最好，要能激励用户点击进来。</p>
<h5 id="meta-description">meta description</h5>
<p>有近似关键词的就行，这里虽然就是主关键词，一般近似都可以的，而且不要太长太大段的内容，这个内容会显示在这个位置：</p>
<figure data-type="image" tabindex="15"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200803221612.png" alt="" loading="lazy"></figure>
<h5 id="然后输入focus-keyword">然后输入Focus keyword：</h5>
<figure data-type="image" tabindex="16"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200803221206.png" alt="" loading="lazy"></figure>
<p>这样插件就可以帮你分析了。分析结果不需要全绿，尽量多就行。</p>
<h5 id="然后url">然后URL：</h5>
<p>wp中一般设置URL就是post name就行。</p>
<h5 id="接下来就是h1标题做seo">接下来就是H1标题做SEO：</h5>
<p>标准和标题里的差不多的，就是主关键词尽量靠前，实在不好组织语句就往后逐步顺延，但能靠多前靠多前。</p>
<h5 id="然后段落文本中">然后段落文本中：</h5>
<p>需要副关键词、关联关键词，这老师是用的：</p>
<figure data-type="image" tabindex="17"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200803222740.png" alt="" loading="lazy"></figure>
<p>出现位置：</p>
<figure data-type="image" tabindex="18"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200803223012.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="19"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200803223113.png" alt="" loading="lazy"></figure>
<p>因为用户搜索的时候，可能不会直接搜主关键词，搜的其他关键词如果在你文本中的关联关键词，副关键词，那就也有机会出现在搜索结果前面。</p>
<p>但要注意，关键词不要乱堆砌，要自然通顺。</p>
<p><strong>这个是规则，但一般操作就是先写一段话，然后改，想办法加这些关键词进去。</strong></p>
<h5 id="图片">图片:</h5>
<p>页面里面的图片名字，alt文本可以设置成关键词【主，副都可以】</p>
<h5 id="补充">补充：</h5>
<p>然后就是加testimonial：</p>
<figure data-type="image" tabindex="20"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200803223113.png" alt="" loading="lazy"></figure>
<p>加call us section ：</p>
<figure data-type="image" tabindex="21"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200803223304.png" alt="" loading="lazy"></figure>
<p>footer里面加联系方式【每一页就都可以找到联系方式了】：</p>
<figure data-type="image" tabindex="22"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200803223349.png" alt="" loading="lazy"></figure>
<h5 id="分流">分流：</h5>
<figure data-type="image" tabindex="23"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200803223613.png" alt="" loading="lazy"></figure>
<p>就是在主页的slider下面记得加个这个section，可以跳转到其他分类页面，这样主页的流量不会浪费：</p>
<ol>
<li>
<p>如果用户看到且用户觉得还OK，那他会点开稍后查看，</p>
</li>
<li>
<p>而且一般在本地列表站，都是录入自己网站的主页，这样外链的权重可以分出一部分到这几个子页面。</p>
</li>
</ol>
<p><strong>还需要注意的就是，不需要做成100%SEO优化的，有个7成就行了。</strong></p>
<h4 id="blogpersonal-2">Blog/Personal:</h4>
<p>标题举例：</p>
<p><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200803232518.png" alt="" loading="lazy">就是说:</p>
<h5 id="标题里面有关键词但是也要有可读性">标题里面有关键词，但是也要有可读性；</h5>
<h5 id="url的slug可以和标题的不一致">URL的slug可以和标题的不一致；</h5>
<h5 id="第一段要有主关键词">第一段要有主关键词；</h5>
<h5 id="meta-也要有关键词">Meta 也要有关键词；</h5>
<h5 id="内链">内链；</h5>
<p>实在想不出可以搞个Read More...., Related...., Recommend....</p>
<h5 id="指向外部的链接">指向外部的链接；</h5>
<h5 id="图片-2">图片；</h5>
<p><strong>其余的可以以后参考同行的做。</strong></p>
<h4 id="ecommerce-2">eCommerce:</h4>
<p>标题, URL, H1, Meta, 图片[name, alt], 段落文本....</p>
<h3 id="offpage-seo">Offpage SEO</h3>
<p>基本上就是怎么做外链。</p>
<ol>
<li>
<p>谷歌搜出同行</p>
</li>
<li>
<p>Semrush查同行的backlinks：最好anchor text是你的主关键词，但不强求，数据自然一点</p>
</li>
<li>
<p><strong>同行外链来源如果找到有local listing或黄页站，那自己可以注册的，就注册然后自己添外链</strong></p>
</li>
<li>
<p>如果看到同行的外链中有评论链接，或者下面这种链接，那也可以自己手动做外链：<img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200804010626.png" alt="" loading="lazy"></p>
</li>
<li>
<p>还可以在大学啊啥的发coupon链接。不过要注意：<img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200804010935.png" alt="" loading="lazy"></p>
</li>
<li>
<p>还有就是看博客，给人家交换价值，或者直接contact站长，付费做guest post之类的。不过要确保目标站和自己的站点有关联性，而且站点内容有活跃。</p>
</li>
<li>
<p><strong>神奇小妙招：</strong></p>
<blockquote>
<p>以旅游类博客为例</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200804011307.png" alt="" loading="lazy">安装一个插件，chrome extesion 搜 check my links.效果如下：<img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200804011929.png" alt="" loading="lazy"></p>
<p>看到这种invalid links，可以看看站点主题内容是否与我们的站点相关，如果是，那么可以向站长联系，你的这个链接掉了【是那种他链接过去的站点网站没做了，生意不做了之类的】，但是内容我和他的差不多，可以链接我不，因为你的内容如果也不错，对于他的文章也是有益处的，不用谈及付费。</p>
<p>比如：<img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200804012434.png" alt="" loading="lazy">这个地方就是掉了，这段话就是给他文章的读者推荐了一家讲解visa资料的站，但是这个站挂了，那你要是有一个站，有这方面的内容，或者写好了这方面的内容，在忙外链，那就正好可以咨询一下这个站长。</p>
</li>
</ol>
<h3 id="analysis跟踪分析自己的seo成绩如何提高">Analysis：跟踪分析自己的SEO成绩，如何提高</h3>
<h5 id="用semrush">用Semrush：</h5>
<figure data-type="image" tabindex="24"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200804013646.png" alt="" loading="lazy"></figure>
<p>然后就是一路按照导航微操。</p>
<h5 id="google-analytics"><a href="https://marketingplatform.google.com/about/">Google analytics</a></h5>
<figure data-type="image" tabindex="25"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200804014101.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="26"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200804014151.png" alt="" loading="lazy"></figure>
<p>然后按照导航一路微操</p>
<p>如果是WP，可以安装<img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200804014253.png" alt="" loading="lazy"></p>
<p>小设置：</p>
<figure data-type="image" tabindex="27"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200804014408.png" alt="" loading="lazy"></figure>
<p>效果：</p>
<figure data-type="image" tabindex="28"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200804014434.png" alt="" loading="lazy"></figure>
<p>当然更详细的数据还是在google 自己的dashboard看啦。</p>
<h5 id="keyword"><a href="https://keyword.com/">Keyword</a></h5>
<h4 id="其他推荐">其他推荐</h4>
<p><a href="https://neilpatel.com/">Neil patel</a></p>
<p><a href="https://smartblogger.com/">Smart Blogger</a></p>
<p><a href="https://www.stackpath.com/">Stackpath</a> CDN加速服务。贵得很。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SEO 之 Keyword research]]></title>
        <id>https://dzkjz.github.io/post/seo-zhi-keyword-research/</id>
        <link href="https://dzkjz.github.io/post/seo-zhi-keyword-research/">
        </link>
        <updated>2020-08-01T17:50:42.000Z</updated>
        <content type="html"><![CDATA[<h2 id="what-is-seosearch-engine-optimization">What is SEO[search engine optimization]</h2>
<p><a href="https://www.youtube.com/watch?v=D7UxlkwdYc0">What is SEO and How Does it Work? (2020)</a></p>
<p>1.40%</p>
<p>2.20%</p>
<p>3.10%</p>
<p>few than 10% will goto next page</p>
<p>relavant</p>
<p>people also ask</p>
<h3 id="on-page-seo"><a href="https://www.youtube.com/watch?v=R0ETQVW3PbI">On-Page SEO</a></h3>
<p>controllable</p>
<p>是可以在写完文章后做的调整。写的时候也可以。</p>
<ol>
<li>标题中有你要的主题keyword，越靠前越好。</li>
<li>url中也要有。url尽量短一点，主题鲜明一点。</li>
<li>第一段文本甚至于第一段的第一句，要有keyword。</li>
<li>内链，为了提高在站时长。google也会据此加分。甚至就是简单的，【建议阅读+链接】的格式。</li>
<li>副标题，子标题可以尽量有keyword。或者关联keyword的助力keyword。</li>
<li>避免长文本段落，可以加图片增加一点空间。图片 alt文本【描述图片用】，图片title。</li>
<li>meta description 一般就是</li>
</ol>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200801221937.png" alt="" loading="lazy"></figure>
<blockquote>
<p>但是不要超过160个字符。</p>
</blockquote>
<ol start="8">
<li>可以加几个出站链接。</li>
</ol>
<h3 id="backlinks">Backlinks</h3>
<h2 id="keyword-research"><a href="https://www.youtube.com/watch?v=Mhk76ZvccK8">Keyword Research</a></h2>
<h3 id="关键词动机">关键词动机</h3>
<h4 id="品牌-amazon-netflix">品牌 amazon netflix...</h4>
<h4 id="商品型号-cannon-5d-tesla-model-s">商品型号 cannon 5d, Tesla Model S...</h4>
<h4 id="资料信息-what-how">资料信息 what how ...</h4>
<h4 id="查询-best-top-coupon-deals-cheap-budget-affordable-free">查询 best top coupon deals cheap budget affordable free...</h4>
<h3 id="方法">方法</h3>
<blockquote>
<p>注意，主要是用于博客类的网站</p>
</blockquote>
<h4 id="头脑风暴">头脑风暴</h4>
<p>应该自己想一个topic，没人比你更清楚你要做的是什么。从这个start point出发，联想一些词，但是由于长期关注到的是这几个主题词，并不一定能清楚知道，用户平时搜索的词具体是什么，更多的是什么，比例如何，关联度如何，所以需要下面的工具。</p>
<h4 id="工具">工具</h4>
<h5 id="keywords-everywhere"><a href="https://keywordseverywhere.com/">keywords everywhere</a></h5>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200801213305.png" alt="" loading="lazy"></figure>
<h5 id="related-keywords">related keywords</h5>
<figure data-type="image" tabindex="3"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200801212122.png" alt="" loading="lazy"></figure>
<h5 id="answerthepublic"><a href="https://answerthepublic.com/">answerthepublic</a></h5>
<figure data-type="image" tabindex="4"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200801213424.png" alt="" loading="lazy"></figure>
<h5 id="semrush"><a href="https://www.semrush.com/">Semrush</a> 付费版</h5>
<figure data-type="image" tabindex="5"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200801213709.png" alt="" loading="lazy"></figure>
<h5 id="ahrefs"><a href="https://ahrefs.com/">Ahrefs</a></h5>
<p><a href="https://www.youtube.com/watch?v=1BME8PfbulI">How to Use Ahrefs for Keyword Research</a> 视频很罗嗦，主题就是一个很简单的Ahref说明书。</p>
<h5 id="这里"><a href="https://www.youtube.com/watch?v=0r_HMKDxpK0">这里</a>还推荐了一个工具： <a href="https://neilpatel.com/ubersuggest/">Ubersuggest</a></h5>
<h5 id="google-trends"><a href="https://trends.google.com/trends/">Google Trends</a></h5>
<p>介绍基本用法，其实很简单，就是输入搜索词，然后结果分析一下。<a href="https://www.youtube.com/watch?v=u75nbWDqymA">How To Use Google Trends! Market Research To Compare Keywords, Topics &amp; Niches, Fast!</a>，其他的都是废话。</p>
<h5 id="kwfinder"><a href="https://kwfinder.com/">KWFinder</a></h5>
<h4 id="seo-tutorial-for-beginners-step-by-step-guide-2020-yoast-seo"><a href="https://www.youtube.com/watch?v=f_n0_cxWqSs">SEO Tutorial for Beginners - Step by Step Guide 2020! (+YOAST SEO)</a></h4>
<h5 id="keyword"><a href="https://keyword.com/">Keyword</a></h5>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ 向google提交站点【请求收录】]]></title>
        <id>https://dzkjz.github.io/post/xiang-google-ti-jiao-zhan-dian-qing-qiu-shou-lu/</id>
        <link href="https://dzkjz.github.io/post/xiang-google-ti-jiao-zhan-dian-qing-qiu-shou-lu/">
        </link>
        <updated>2020-07-31T14:57:17.000Z</updated>
        <content type="html"><![CDATA[<p>登录地址 https://search.google.com/</p>
<p>需要验证域名所有权</p>
<p>参考 <a href="https://www.youtube.com/watch?v=B4p1nVspM5U">How to Ask Google to Recrawl URLs of Your WordPress Site</a></p>
<p>或 <a href="https://www.wpbeginner.com/wp-tutorials/how-to-ask-google-to-recrawl-urls-of-your-wordpress-site/">How to Ask Google to Recrawl URLs of Your WordPress Site</a></p>
<p>提交页面 index请求</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200731225136.png" alt="" loading="lazy"></figure>
<p>现在搜索框中输入页面地址，回车，看是不是页面被索引了，如果需要索引 点REQUEST INDEXING即可。</p>
<p>提交sitemap</p>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200731225523.png" alt="" loading="lazy"></figure>
<p>一般来说，一个小时到一天就收录了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[laravel使用sendgrid的配置]]></title>
        <id>https://dzkjz.github.io/post/laravel-shi-yong-sendgrid-de-pei-zhi/</id>
        <link href="https://dzkjz.github.io/post/laravel-shi-yong-sendgrid-de-pei-zhi/">
        </link>
        <updated>2020-07-30T16:55:49.000Z</updated>
        <content type="html"><![CDATA[<p><code>petapi-app</code>的<code>.env</code>文件需要修改：</p>
<p>將<code>QUEUE_CONNECTION=sync</code>改爲：</p>
<pre><code>QUEUE_CONNECTION=database
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200731015131.png" alt="" loading="lazy"></figure>
<p>這樣才能使用queue job，之前不改就一直给👴报500错误：</p>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200731005112.png" alt="" loading="lazy"></figure>
<p><s>而且参考使用 <code>https://github.com/s-ichikawa/laravel-sendgrid-driver</code></s></p>
<p><s>之后 sendgrid 配置就很简单了：</s></p>
<blockquote>
<p>.env</p>
<pre><code>MAIL_DRIVER=sendgrid
SENDGRID_API_KEY='YOUR_SENDGRID_API_KEY'
</code></pre>
<p>config/services.php (In using lumen, require creating config directory and file.)</p>
<pre><code>'sendgrid' =&gt; [
  'api_key' =&gt; env('SENDGRID_API_KEY'),
],
</code></pre>
<p>config/mail.php</p>
<pre><code>'mailers' =&gt; [
  'sendgrid' =&gt; [
      'transport' =&gt; 'sendgrid',
  ],
],
</code></pre>
</blockquote>
<p>用了之后报550错误</p>
<p>官方文档写</p>
<blockquote>
<table>
<thead>
<tr>
<th>550</th>
<th><code>Requested action not taken: mailbox unavailable</code></th>
<th>The user’s mailbox was unavailable. Usually because it could not be found, or because of incoming policy reasons. Remove these address from your list - it is likely a fake, or it was mistyped.</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</blockquote>
<p><strong>所以又换成了原来的默认配置，并且参考 https://sendgrid.com/docs/for-developers/sending-email/laravel/ 配置了<code>.env</code>，然后就ok了 port是用的587+ tls没有用ssl+465</strong></p>
<figure data-type="image" tabindex="3"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200731015038.png" alt="" loading="lazy"></figure>
<p>另外参考 <code>https://laravel.io/forum/why-queue-still-waiting-when-send-mail-in-laravel</code> 可以在app容器内执行</p>
<pre><code>composer dumpautoload
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200731014523.png" alt="" loading="lazy"></figure>
<p>还要注意，之前使用的queue容器，因为默认是root用户 无法执行artisan命令 所以这个容器就用不上了。</p>
<p>于是又改成了在docker容器里加<code>supervisord</code>：</p>
<blockquote>
<p>不过在使用supervisord前多说几句，</p>
<p>平时执行的 <code>php artisan queue:work</code>一旦关闭terminal，就会中止，所以需要介绍一个<a href="https://linux.die.net/man/1/nohup"><code>nohup</code></a>命令，此命令可以忽略terminal中止，<em>nohup-运行不受挂断影响的命令，并采用非tty输出</em> ，那么参考https://stackoverflow.com/a/28625847 即可执行：</p>
<p><code>nohup php artisan queue:work --daemon &amp;</code></p>
<p>或者执行下面命令把log输出到文件中</p>
<p><code>nohup php artisan queue:work --daemon &gt; app/storage/logs/laravel.log &amp;</code></p>
</blockquote>
<p>开始讲解如何使用supervisord:</p>
<p><a href="https://laravel.com/docs/7.x/queues#supervisor-configuration">官方讲解</a></p>
<p><a href="https://medium.com/@rohit_shirke/configuring-supervisor-for-laravel-queues-81e555e550c6">补充讲解</a></p>
<p><a href="https://blog.whabash.com/posts/installing-supervisor-manage-laravel-queue-processes-ubuntu">Installing Supervisor to Manage Laravel Queue Processes on Ubuntu</a></p>
<p>执行<code>sudo apt install supervisor</code> 这个安装由于可以在dockerfile中完成所以直接加到了app服务的Dockerfile中。</p>
<pre><code>FROM php:7.2.19-fpm

# Arguments defined in docker-compose.yml
ARG user
ARG uid

# Install system dependencies
RUN apt-get update &amp;&amp; apt-get install -y \
    git \
    curl \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    zip \
    unzip \
	supervisor


# Clear cache
RUN apt-get clean &amp;&amp; rm -rf /var/lib/apt/lists/*

# Install PHP extensions
RUN docker-php-ext-install pdo_mysql mbstring exif pcntl bcmath gd

# Get latest Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Create system user to run Composer and Artisan Commands
RUN useradd -G www-data,root -u $uid -d /home/$user $user
RUN mkdir -p /home/$user/.composer &amp;&amp; \
    chown -R $user:$user /home/$user

# Set working directory
WORKDIR /var/www

USER $user

</code></pre>
<p>然后是Supervisor配置文件，默认情况这个配置文件需要放在/etc/supervisor/conf.d文件夹下面，此文件夹下，可以创建无数你需要的配置文件，反正需要supervisor监视的就给到这里面，那这个文件夹在<code>docker-compose.prod.yml</code>里面直接用volume挂载好就行了，我这里是</p>
<pre><code class="language-yml">version: &quot;3.7&quot;
services:
  app:
    build:
      args:
        user: petapi
        uid: 1000
      context: ./
      dockerfile: Dockerfile
    image: petapii
    container_name: petapi-app
    restart: unless-stopped
    working_dir: /var/www/
    volumes:
      - ./:/var/www
      - ./docker-compose/supervisor:/etc/supervisor/conf.d
    networks:
      - petapin
</code></pre>
<p>挂的这个文件夹</p>
<p><code>- ./docker-compose/supervisor:/etc/supervisor/conf.d</code></p>
<p>然后再在 宿主机 上下文 <code>./docker-compose/supervisor</code>路径创建名为<code>petapi-worker.conf</code>的文件，容器启动后，容器内就挂得有一个<code>/etc/supervisor/conf.d/petapi-worker.conf</code>文件了。</p>
<p>编辑文件如下：</p>
<pre><code class="language-conf">[program:petapi-worker]
process_name=%(program_name)s_%(process_num)02d
command=sudo php /var/www/artisan queue:work --tries=3 --sleep=3 --daemon
user=petapi
autostart=true
autorestart=true
numprocs=1
redirect_stderr=true
stopwaitsecs=3600
stdout_logfile=/var/www/storage/logs/petapi-worker-supervisor.log
</code></pre>
<p>我的petapi挂载在/var/www下面，artisan命令执行也在改文件夹路径，所以command为<code>command=sudo php /var/www/artisan queue:work</code></p>
<blockquote>
<p>也可以使用conf再执行脚本的方式，参考 https://gist.github.com/danharper/9136507</p>
</blockquote>
<blockquote>
<p><strong>由于需要给supervisor执行php artisan命令的权限，所以用户设置为了petapi，有的如：<a href="https://ekn.me/2019-11-05/how-to-use-laravel-queue-worker-with-supervisor">How to use Laravel Queue Worker with Supervisor </a> 及<a href="https://blog.whabash.com/posts/installing-supervisor-manage-laravel-queue-processes-ubuntu">Installing Supervisor to Manage Laravel Queue Processes on Ubuntu</a>给了用户组supervisor然后给这个用户组添加执行artisan命令的权限，这里我们不需要的。</strong></p>
</blockquote>
<p>然后服务容器启动就执行</p>
<pre><code>sudo supervisorctl reread

sudo supervisorctl update

sudo supervisorctl start petapi-worker:*
</code></pre>
<p><s>直接写到supervisor_petapi.sh脚本里面，文件在<code>./docker-compose/supervisor</code>宿主机文件夹内</s></p>
<pre><code class="language-sh">supervisorctl reread

supervisorctl update

supervisorctl start petapi-worker:*
</code></pre>
<p><s>然后Dockerfile添加：</s></p>
<pre><code>COPY --chown=$user ./docker-compose/supervisor/supervisor_petapi.sh /var/www

...
USER $user
...
CMD supervisor_petapi.sh                  
</code></pre>
<p><s>有异常:</s></p>
<blockquote>
<pre><code>  supervisorctl reread
</code></pre>
<p>error: &lt;class 'socket.error'&gt;, [Errno 2] No such file or directory: file: /usr/lib/python2.7/socket.py line: 228</p>
</blockquote>
<p><s>这样app容器启动的时候就会执行上述脚本命令了。</s></p>
<h3 id="还是没成功明天继续">还是没成功，明天继续！</h3>
<p>发现执行</p>
<p><code>docker exec -it petapi-app bash</code>进入容器后，用户由于在Dockerfile中被指定为了petapi，执行<code>apt-get</code>会提示没有权限，所以参考<a href="https://stackoverflow.com/questions/28721699/root-password-inside-a-docker-container">Root password inside a Docker container</a>执行<code>docker exec -u 0 -it petapi-app bash</code>以root身份登录进入即可</p>
<p>执行<code>supervisorctl reread</code></p>
<p>报错<code>unix:///var/run/supervisor.sock no such file</code>，参考<a href="https://serverfault.com/questions/808732/supervisor-sock-file-missing">Supervisor sock file missing</a>执行</p>
<pre><code>service supervisor stop
service supervisor start 
</code></pre>
<p><s>执行<code>supervisorctl reread</code>有报错：</s> 这不是错；</p>
<figure data-type="image" tabindex="5"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200731141643.png" alt="" loading="lazy"></figure>
<p>参考<a href="https://stackoverflow.com/questions/41618674/supervisord-config-changes-not-recognized-after-reread-update">Supervisord config changes not recognized after reread/update</a> 是指，没有更新，所以没有显示有变化。</p>
<p>然后执行<code>supervisorctl update</code></p>
<p>以及<code>supervisorctl start petapi-worker:*</code></p>
<figure data-type="image" tabindex="6"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200731142051.png" alt="" loading="lazy"></figure>
<p>这次是报错了。找不到文件。</p>
<p>如果是报这个错<a href="https://stackoverflow.com/questions/54811044/why-i-get-this-error-laravel-worker-error-no-such-group">laravel-worker: ERROR (no such group)</a>，可以看看</p>
<p><code>/etc/supervisord.conf</code>文件配置的</p>
<pre><code>[include]
files = supervisord.d/*.conf
</code></pre>
<p>这个include部分是不是指向的worker配置路径，我这里是</p>
<figure data-type="image" tabindex="7"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200731142741.png" alt="" loading="lazy"></figure>
<blockquote>
<p>由于debug需要ps命令，所以参考<a href="https://stackoverflow.com/questions/26982274/ps-command-doesnt-work-in-docker-container">ps command doesn't work in docker container</a>,执行<code>RUN apt-get update &amp;&amp; apt-get install -y procps</code>添加之</p>
</blockquote>
<p>执行<code>ps -ef | grep supervisor</code>查看</p>
<figure data-type="image" tabindex="8"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200731143919.png" alt="" loading="lazy"></figure>
<p>但是执行<code>service supervisor stop</code>后依然有一个</p>
<figure data-type="image" tabindex="9"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200731144343.png" alt="" loading="lazy"></figure>
<p>索性直接执行<code>kill -s SIGTERM 468</code>关闭这个468进程。</p>
<p>然后执行<code>service supervisor start</code>启动后查看：</p>
<figure data-type="image" tabindex="10"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200731144534.png" alt="" loading="lazy"></figure>
<p>下面解释一下</p>
<p><code>/usr/bin/supervisord -c /etc/supervisor/supervisord.conf</code>，</p>
<blockquote>
<p>参考<a href="http://supervisord.org/installing.html#creating-a-configuration-file">Creating a Configuration File</a>，如果执行用户没有root权限或者supervisord.conf文件没有放在默认的/etc/supervisord.conf路径，那么-c后面接你实际防止supervisord.conf文件的路径。默认情况下，supervisor会在其当前路径里面找这个conf文件，加 -c 就可以指定其他位置了。</p>
</blockquote>
<p>但是执行<code>supervisorctl start petapi-worker:*</code></p>
<figure data-type="image" tabindex="11"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200731142051.png" alt="" loading="lazy"></figure>
<p>这次是依然报错了。找不到文件。直接nano编辑这个文件然后</p>
<figure data-type="image" tabindex="12"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200731151403.png" alt="" loading="lazy"></figure>
<p>终于给👴OK了。</p>
<p>然后执行<code>supervisorctl status</code>查看一下状态：</p>
<figure data-type="image" tabindex="13"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200731151632.png" alt="" loading="lazy"></figure>
<p>行吧。</p>
<p>再改一下。</p>
<p>先执行<code>supervisorctl stop all</code></p>
<figure data-type="image" tabindex="14"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200731152456.png" alt="" loading="lazy"></figure>
<p>及执行<code>service supervisor stop</code>停掉进程。</p>
<p>再执行<code>supervisorctl status</code>查看状态：</p>
<figure data-type="image" tabindex="15"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200731151828.png" alt="" loading="lazy"></figure>
<p>再执行<code>ps -ef | grep supervisor</code>查看进程停止完没有：</p>
<figure data-type="image" tabindex="16"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200731151941.png" alt="" loading="lazy"></figure>
<p>OK，停止完了，我们改改这个petapi-worker.conf文件：</p>
<p>去掉sudo后：</p>
<figure data-type="image" tabindex="17"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200731152052.png" alt="" loading="lazy"></figure>
<p>然后执行<code>service supervisor start</code>及</p>
<pre><code>supervisorctl reread

supervisorctl update

supervisorctl start petapi-worker:*
</code></pre>
<p>然后执行<code>supervisorctl status</code>查看状态</p>
<figure data-type="image" tabindex="18"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200731152816.png" alt="" loading="lazy"></figure>
<p>OK了。</p>
<h2 id="总结">总结</h2>
<h4 id="petapi-workerconf文件">petapi-worker.conf文件：</h4>
<pre><code>[program:petapi-worker]
process_name=%(program_name)s_%(process_num)02d
command=php /var/www/artisan queue:work --tries=3 --sleep=3 --daemon
user=petapi
autostart=true
autorestart=true
numprocs=1
redirect_stderr=true
;stopwaitsecs=3600
stdout_logfile=/var/www/storage/logs/petapi-worker-supervisor.log
</code></pre>
<h4 id="app容器的dockerfile文件">app容器的Dockerfile文件：</h4>
<pre><code>FROM php:7.2.19-fpm

# Arguments defined in docker-compose.yml
ARG user
ARG uid

# Install system dependencies
RUN apt-get update &amp;&amp; apt-get install -y \
    git \
    curl \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    zip \
    unzip \
	supervisor


# Clear cache
RUN apt-get clean &amp;&amp; rm -rf /var/lib/apt/lists/*

# Install PHP extensions
RUN docker-php-ext-install pdo_mysql mbstring exif pcntl bcmath gd

# Get latest Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Create system user to run Composer and Artisan Commands
RUN useradd -G www-data,root -u $uid -d /home/$user $user
RUN mkdir -p /home/$user/.composer &amp;&amp; \
    chown -R $user:$user /home/$user

# Set working directory
WORKDIR /var/www

USER $user
</code></pre>
<p>考虑给一个supervisor容器。</p>
<blockquote>
<p>因为supervisorctl命令执行需要root用户，petapi用户不行。</p>
</blockquote>
<p>之前在Dockerfile中添加</p>
<pre><code>COPY --chown=$user  ./docker-compose/supervisor/supervisor_petapi.sh . 
...
USER $user
...
CMD /var/www/supervisor_petapi.sh
...
</code></pre>
<p>的方式不可行，因为sh脚本里面的命令执行必须是root权限，而切换成USER petapi后就无法执行sh脚本里面的supervisorctl命令了。</p>
<p>另外也不能将CMD删除换成在USER切换前的RUN命令，因为虽然用户权限有了，但是容器没有启动，sh脚本里面的conf文件执行artisan命令必然失败。</p>
<p>所以考虑给一个supervisor容器。</p>
<h2 id="最方便的方式">最方便的方式：</h2>
<p>也是最合适的方式，这样一个容器只负责一件事。</p>
<p><code>docker-compose.prod.yml</code>采用php-queue服务，其服务容器的镜像就是这个petapi-app的镜像，而用户不给参数，则直接使用petapi-app中就设置好的petapi用户，然后command就是<code>command: [&quot;php&quot;, &quot;/var/www/app/artisan&quot;, &quot;queue:work&quot;, &quot;--daemon&quot;, &quot;--sleep=3&quot;, &quot;--tries=3&quot;]</code></p>
<p>这样supervisor都不用。</p>
<p>不过 同时我们还需要执行一个<code>composer dumpautoload</code>命令，参考<a href="https://stackoverflow.com/questions/30063907/using-docker-compose-how-to-execute-multiple-commands">Using Docker-Compose, how to execute multiple commands</a>所以：</p>
<pre><code>command: &gt;
	bash -c &quot;php artisan queue:work --sleep=3 --tries=3 &amp;&amp;
	composer dumpautoload&quot;
</code></pre>
<p>如果没有安装bash的，请使用<code>sh -c</code></p>
<h4 id="docker-composerprodyml"><code>docker-composer.prod.yml</code></h4>
<pre><code class="language-yml">version: &quot;3.7&quot;
services:
  app:
    build:
      args:
        user: petapi
        uid: 1000
      context: ./
      dockerfile: Dockerfile
    image: petapii
    container_name: petapi-app
    restart: unless-stopped
    working_dir: /var/www/
    volumes:
      - ./:/var/www
    networks:
      - petapin
  php-queue:
    restart: always
    container_name: petapi-app-queue
    working_dir: /var/www/
    image: petapii
    depends_on:
      - &quot;app&quot;
    command: bash -c &quot;php artisan queue:work --sleep=3 --tries=3 &amp;&amp; composer dumpautoload&quot;
    volumes:
      - ./:/var/www
    networks:
      - petapin
  frontapp:
    build:
      context: ~/petclient/dockerfiles/node/
      dockerfile:  Dockerfile
    image: frontapp
    container_name: petclient-frontapp
    restart: unless-stopped
    networks:
      - petclientn
  db:
    image: mysql:5.7
    container_name: petapi-db
    restart: unless-stopped
   #env_file:
     # - ~/petapi/pets-api/.env
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
      - ./docker-compose/mysql:/docker-entrypoint-initdb.d
      - ./docker-compose/mysql/data:/var/lib/mysql
    networks:
      - petapin
  nginx:
   # build:
    # context: ./dockerfiles/nginx/
   #  dockerfile: Dockerfile
  #  image: nginx:1.19.1-alpine-custom
    image: nginx:1.19.1-alpine
    container_name: pet-nginx
    restart: always
    depends_on:
      - app
      - frontapp
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./:/var/www
      - ./docker-compose/nginx:/etc/nginx/conf.d
      - ./docker-compose/nginx/certs:/etc/nginx/certs
    networks:
      - petapin
      - petclientn
networks:
  petapin:
    driver: bridge
  petclientn:
    driver: bridge
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mysql Docker容器关于如何处理down后up数据就丢失的问题以及原理]]></title>
        <id>https://dzkjz.github.io/post/mysql-docker-rong-qi-guan-yu-ru-he-chu-li-down-hou-up-shu-ju-jiu-diu-shi-de-wen-ti-yi-ji-yuan-li/</id>
        <link href="https://dzkjz.github.io/post/mysql-docker-rong-qi-guan-yu-ru-he-chu-li-down-hou-up-shu-ju-jiu-diu-shi-de-wen-ti-yi-ji-yuan-li/">
        </link>
        <updated>2020-07-27T07:45:51.000Z</updated>
        <content type="html"><![CDATA[<p>Mysql Docker容器关于如何处理down后up数据就丢失的问题以及原理</p>
<p>[toc]</p>
<p>docker-compose 可以很方便的用于部署多容器环境。其中比较繁琐的就是做到多应用间数据分离。</p>
<p>容器随时我们可以关闭更新更换，但是要怎么做到数据的连续性就很关键了。</p>
<h2 id="一-场景介绍">一、场景介绍</h2>
<p>比较常见的情况，如果你运行起一个数据库容器，如果你删除了这个容器，那存在其中的数据也就丢失了。</p>
<p>特别是执行<code>docker-compose down</code>然后更新dockerfile和docker-compose.yml文件，再执行<code>docker-compose up -d</code>，你之前网站的数据就丢了。</p>
<h2 id="二-原理以及原因">二、原理以及原因</h2>
<blockquote>
<p>我们在有运行数据库容器的机器里面演示；</p>
</blockquote>
<p>执行<code>docker volume ls</code>查看服务器里面的数据卷：</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200727152424.png" alt="" loading="lazy"></figure>
<p>默认driver就是local ，我们配置的数据卷都在这里面了。</p>
<p>为了查看哪一个是数据库容器的数据卷，以及对应的详细信息</p>
<p>执行<code>docker inspect 数据库容器名</code></p>
<p>然后找到 Mounts部分：</p>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/dzkjz/images-repo/master/20200727152753.png" alt="" loading="lazy"></figure>
<p>第一个我们配置的可以在docker-compose.prod.yml中找到：</p>
<pre><code class="language-yml">  db:
    image: mysql:5.7
    container_name: ***api-db
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
      - ./docker-compose/mysql:/docker-entrypoint-initdb.d
</code></pre>
<p>而第二个对应目标地址是<code>/var/lib/mysql</code>的，因为我没有配置，所以自动给了一个，正是这个没有配置，导致每次<code>docker-compose up -d</code>就生成一个新容器及对应的数据卷，然后之前的数据库数据就丢失了。</p>
<h2 id="三-处理办法">三、处理办法</h2>
<p>如果你配置了比如</p>
<pre><code class="language-yml">  db:
    ...
    volumes:
      - ./docker-compose/mysql:/docker-entrypoint-initdb.d
      - /data/mysql:/var/lib/mysql
   #   - /data/pgsql:/var/lib/postgresql
   #   - /data/maria:/var/lib/mariadb
   #   - /data/redis:/var/lib/redis
   #   - /data/memcached:/var/lib/memcached
   #   - /data/neo4j:/var/lib/neo4j/data
    networks:
      ...
</code></pre>
<p>配置了对应的本地[宿主机]数据卷位置，第一次<code>docker-compose up -d</code>的时候会直接关联起来，而下一次执行<code>docker-compose up -d</code>的时候，daemon执行到生成一个对应数据卷位置的时候，发现已经给了配置，那就跳过，使用先前的。</p>
<p>当然也可以这么配置：</p>
<pre><code class="language-yml">volumes:
- db-data:/var/lib/mysql
volumes:
 db-data:
  driver: local
</code></pre>
<blockquote>
<p>参考 <a href="https://linuxhint.com/run_postgresql_docker_compose/">Running PostgreSQL using Docker Compose</a></p>
<p>参考 <a href="https://stackoverflow.com/questions/43297384/data-is-lost-in-mysql-docker-container-after-comminting-it-to-a-new-image">Data is lost in Mysql docker container after comminting it to a new image?</a></p>
<blockquote>
<p>I don't know which image you're using but I believe every <code>Dockerfile</code> of <a href="https://github.com/docker-library/mysql">official mysql images</a> has following command:</p>
<pre><code>VOLUME /var/lib/mysql
</code></pre>
<p>which means all mysql data goes to volume. From <a href="https://docs.docker.com/engine/tutorials/dockervolumes/">docker volume docs</a> they specially mentioned that:</p>
<pre><code>&gt; Changes to a data volume will not be included when you update an image.
</code></pre>
<p>And this is the root cause you loss your data in newly started container.</p>
<p>For your question:</p>
<blockquote>
<p>How to achieve this?</p>
</blockquote>
<p>You can use either <a href="https://docs.docker.com/engine/tutorials/dockervolumes/#mount-a-host-directory-as-a-data-volume">mounted volumes</a>, or create a <a href="https://docs.docker.com/engine/tutorials/dockervolumes/#creating-and-mounting-a-data-volume-container">data volume container</a>, then run mysql container with option <code>--volumes-from</code>. The former links contain step-by-step guide of how to do it.</p>
<blockquote>
<p>I don't want to use mounted volumes because i want to link this container with another container of my application so that it can inset and update into db</p>
</blockquote>
<p>I don't know what other concerns you have about mounted volumes, but as far as I can tell, using mounted volumes does not prevent you to link containers.</p>
<p>Hope this helps you.</p>
</blockquote>
</blockquote>
<h2 id="四-如果不慎丢失怎么恢复">四、如果不慎丢失，怎么恢复</h2>
<p>如果数据卷都删除了 docker rm 容器的时候 添加了 -v 或 -volume，那就拜拜，没有任何办法的。如果没有删除volume 参考：</p>
<p><a href="https://www.primozker.in/post/saving-lost-data-docker/">Saving 'lost' MYSQL database running in Docker</a></p>
<p>更多可以看<a href="https://docs.docker.com/storage/volumes/">官方文档</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ 解决 sitemap robots.txt 以及提交google index]]></title>
        <id>https://dzkjz.github.io/post/jie-jue-sitemap-robotstxt-yi-ji-ti-jiao-google-index/</id>
        <link href="https://dzkjz.github.io/post/jie-jue-sitemap-robotstxt-yi-ji-ti-jiao-google-index/">
        </link>
        <updated>2020-07-26T12:48:03.000Z</updated>
        <content type="html"><![CDATA[<h2 id="sitemap"><a href="#https://www.npmjs.com/package/@nuxtjs/sitemap">Sitemap</a></h2>
<p>在nuxt app里面执行</p>
<pre><code class="language-powershell">npm install @nuxtjs/sitemap
</code></pre>
<pre><code class="language-js">//nuxt.config.js
  modules: [
    // Doc: https://axios.nuxtjs.org/usage
    '@nuxtjs/axios',
    '@nuxtjs/auth',
    'vue-social-sharing/nuxt',
    // Doc: https://github.com/nuxt-community/dotenv-module
    '@nuxtjs/dotenv',
    'cookie-universal-nuxt',//https://www.npmjs.com/package/cookie-universal-nuxt
    '@nuxtjs/sitemap',
  ],

  sitemap: {
    //https://www.npmjs.com/package/@nuxtjs/sitemap
    hostname: 'https://' + process.env.DOMAIN_NAME,
    gzip: true,
    exclude: [
      '/verify/**',
      '/verifynew/**',
      '/password_reset/**',
      '/dashboard_reset/**',
      '/animals/create/**',
    ],
</code></pre>
<p>具体配置<a href="#https://www.npmjs.com/package/@nuxtjs/sitemap">官方文档</a>有讲。</p>
<p>默认情况下只有static页面会自动添加，对于动态的路由页面，<code>parent/:children</code>，这样的，参考 <a href="#https://elision.design/en/blog/dynamic-routes-in-sitemap-with-nuxt-js">HOW TO: Include dynamic routes in sitemap with Nuxt.js</a></p>
<h2 id="robottxt"><a href="#https://www.npmjs.com/package/@nuxtjs/robots">Robot.txt</a></h2>
<p><code>npm install @nuxtjs/robots</code></p>
<pre><code class="language-js">//nuxt.config.js
  modules: [
    // Doc: https://axios.nuxtjs.org/usage
    '@nuxtjs/axios',
    '@nuxtjs/auth',
    'vue-social-sharing/nuxt',
    // Doc: https://github.com/nuxt-community/dotenv-module
    '@nuxtjs/dotenv',
    'cookie-universal-nuxt',//https://www.npmjs.com/package/cookie-universal-nuxt
    '@nuxtjs/sitemap',
    '@nuxtjs/robots',
  ],
        robots: [ //https://www.npmjs.com/package/@nuxtjs/robots
    {
      // UserAgent: 'Googlebot',
      UserAgent: '*',
      Disallow: () =&gt; [
        '/verify',
        '/verify',
        '/verifynew',
        '/password_reset',
        '/dashboard_reset',
        '/animals/create',
      ], // accepts function
      Sitemap: 'https://' + process.env.DOMAIN_NAME + '/sitemap.xml',
    }
  ],
</code></pre>
<p>具体配置介绍参考<a href="#https://www.npmjs.com/package/@nuxtjs/robots">官方文档</a>。</p>
<h2 id="ask-google-to-recrawl-your-urls"><a href="https://support.google.com/webmasters/answer/6065812">Ask Google to recrawl your URLs</a></h2>
<p>Submit a sitemap (many URLs at once)</p>
<p>A sitemap is an important way for Google to discover URLs on your site. A sitemap can also include additional metadata about alternate language versions and video-, image-, or news-specific pages. <a href="https://support.google.com/webmasters/answer/156184">Learn how to create a sitemap.</a></p>
<p>If you have not changed your sitemap since the last time Google crawled it, resubmitting the sitemap won't have any additional benefit. If you have updated pages in the sitemap, mark them with <code>&lt;lastmod&gt;</code>.</p>
<p>Here are the different ways that you can alert Google about your sitemap:</p>
<ul>
<li><strong>Submit a sitemap using the <a href="https://support.google.com/webmasters/answer/7451001">sitemaps report</a>.</strong></li>
<li><strong>Use the ping tool.</strong> Send a GET request in your browser or the command line to this address, specifying the full URL of the sitemap. Be sure that the sitemap file is accessible:<br>
<code>http://www.google.com/ping?sitemap=*&lt;full_URL_of_sitemap&gt;*</code><br>
<strong>Example:</strong><br>
<code>http://www.google.com/ping?sitemap=https://example.com/sitemap.xml</code></li>
<li><strong>Insert the following line anywhere in your <code>robots.txt</code> file</strong>, specifying the path to your sitemap. We will find it the next time we crawl your site:<br>
<code>Sitemap: http://example.com/my_sitemap.xml</code></li>
</ul>
<h2 id="nuxt页面跳转过度动效">Nuxt页面跳转过度动效</h2>
<pre><code class="language-css">/*assets/styles/main.css*/
/*@import '@vue-cookie-accept-decline.css';*/

.page-enter-active, .page-leave-active {
  transition: opacity .5s;
}

.page-enter, .page-leave-to {
  opacity: 0;
}
</code></pre>
<pre><code class="language-js">//nuxt.config.js 
css: [
      ...
    '@/assets/styles/main.css',
      ...
  ],
</code></pre>
<p>官方文档：</p>
<p>https://nuxtjs.org/api/configuration-loading</p>
<p>https://nuxtjs.org/api/pages-transition</p>
<pre><code class="language-js">//nuxt.config.js
loading: {
    color: 'orange',
    height: '5px',
    failedColor: 'red',
    duration: 5000,
    continuous: true,
  },
</code></pre>
<p>自定义的可以参考 <a href="#https://nuxtjs.org/api/configuration-loading#using-a-custom-loading-component">使用自定义的组件设置加载样式</a></p>
<h2 id="改变favicon">改变Favicon</h2>
<p>参考 https://github.com/nuxt/nuxt.js/issues/903</p>
<pre><code class="language-js">//nuxt.config.js
link: [
      {rel: 'icon', type: 'image/x-icon', href: '/tiere_favi.png'},
    ]
</code></pre>
<p><a href="#https://nuxtjs.org/guide/assets/">官方文档</a>也可以看看</p>
]]></content>
    </entry>
</feed>